	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 10
	.globl	_k_gen_cl_gemm_v0_
	.align	4, 0x90
_k_gen_cl_gemm_v0_:                     ## @k_gen_cl_gemm_v0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp0:
	.cfi_def_cfa_offset 16
Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	xorl	%eax, %eax
	movl	%edi, -4(%rbp)          ## 4-byte Spill
	movl	%eax, %edi
	movb	$0, %al
	movq	%rdx, -16(%rbp)         ## 8-byte Spill
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movq	%rcx, -32(%rbp)         ## 8-byte Spill
	callq	_get_global_id
	movl	$1, %edi
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_get_global_id
	xorl	%edi, %edi
	movl	%eax, -40(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_get_global_size
	xorps	%xmm0, %xmm0
	movl	%eax, %edi
	movl	-36(%rbp), %r8d         ## 4-byte Reload
	imull	%r8d, %edi
	cmpl	$0, %eax
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	movl	%edi, -48(%rbp)         ## 4-byte Spill
	movss	%xmm0, -52(%rbp)        ## 4-byte Spill
	jle	LBB0_8
## BB#1:                                ## %.lr.ph
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorps	%xmm0, %xmm0
	movl	-48(%rbp), %eax         ## 4-byte Reload
	movslq	%eax, %rdx
	movl	-44(%rbp), %esi         ## 4-byte Reload
	movslq	%esi, %rdi
	movl	-40(%rbp), %r8d         ## 4-byte Reload
	movslq	%r8d, %r9
	addl	$4294967295, %esi       ## imm = 0xFFFFFFFF
	movl	-44(%rbp), %r10d        ## 4-byte Reload
	andl	$1, %r10d
	cmpl	$0, %r10d
                                        ## implicit-def: XMM1
	movss	%xmm1, -56(%rbp)        ## 4-byte Spill
	movq	%rcx, -64(%rbp)         ## 8-byte Spill
	movq	%rdx, -72(%rbp)         ## 8-byte Spill
	movl	%esi, -76(%rbp)         ## 4-byte Spill
	movq	%rdi, -88(%rbp)         ## 8-byte Spill
	movq	%r9, -96(%rbp)          ## 8-byte Spill
	movss	%xmm0, -100(%rbp)       ## 4-byte Spill
	je	LBB0_3
## BB#2:
	movl	$1, %eax
	movl	%eax, %ecx
	xorps	%xmm0, %xmm0
	movq	-88(%rbp), %rdx         ## 8-byte Reload
	imulq	$0, %rdx, %rsi
	movq	-96(%rbp), %rdi         ## 8-byte Reload
	addq	%rdi, %rsi
	movq	-16(%rbp), %r8          ## 8-byte Reload
	movss	(%r8,%rsi,4), %xmm1     ## xmm1 = mem[0],zero,zero,zero
	movq	-72(%rbp), %rsi         ## 8-byte Reload
	addq	$0, %rsi
	movq	-32(%rbp), %r9          ## 8-byte Reload
	mulss	(%r9,%rsi,4), %xmm1
	addss	%xmm1, %xmm0
	addq	$0, %rcx
	movaps	%xmm0, %xmm1
	movq	%rcx, -64(%rbp)         ## 8-byte Spill
	movss	%xmm1, -56(%rbp)        ## 4-byte Spill
	movss	%xmm0, -100(%rbp)       ## 4-byte Spill
LBB0_3:                                 ## %.lr.ph.split
	movss	-100(%rbp), %xmm0       ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	movq	-64(%rbp), %rax         ## 8-byte Reload
	movss	-56(%rbp), %xmm1        ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movl	-76(%rbp), %ecx         ## 4-byte Reload
	cmpl	$1, %ecx
	movss	%xmm0, -104(%rbp)       ## 4-byte Spill
	movq	%rax, -112(%rbp)        ## 8-byte Spill
	movss	%xmm1, -116(%rbp)       ## 4-byte Spill
	jb	LBB0_7
## BB#4:                                ## %.lr.ph.split.split
	movq	-112(%rbp), %rax        ## 8-byte Reload
	movss	-104(%rbp), %xmm0       ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	movq	%rax, -128(%rbp)        ## 8-byte Spill
	movss	%xmm0, -132(%rbp)       ## 4-byte Spill
	jmp	LBB0_5
LBB0_5:                                 ## =>This Inner Loop Header: Depth=1
	movss	-132(%rbp), %xmm0       ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rcx
	movq	-88(%rbp), %rdx         ## 8-byte Reload
	imulq	%rdx, %rcx
	movq	-96(%rbp), %rsi         ## 8-byte Reload
	addq	%rsi, %rcx
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	movss	(%rdi,%rcx,4), %xmm1    ## xmm1 = mem[0],zero,zero,zero
	movq	%rax, %rcx
	movq	-72(%rbp), %r8          ## 8-byte Reload
	addq	%r8, %rcx
	movq	-32(%rbp), %r9          ## 8-byte Reload
	mulss	(%r9,%rcx,4), %xmm1
	addss	%xmm1, %xmm0
	addq	$1, %rax
	movq	%rax, %rcx
	imulq	%rdx, %rcx
	addq	%rsi, %rcx
	movss	(%rdi,%rcx,4), %xmm1    ## xmm1 = mem[0],zero,zero,zero
	movq	%rax, %rcx
	addq	%r8, %rcx
	mulss	(%r9,%rcx,4), %xmm1
	addss	%xmm1, %xmm0
	movq	%rax, %rcx
	addq	$1, %rcx
	movl	%eax, %r10d
	movl	-76(%rbp), %r11d        ## 4-byte Reload
	cmpl	%r11d, %r10d
	movaps	%xmm0, %xmm1
	movss	%xmm1, -132(%rbp)       ## 4-byte Spill
	movq	%rcx, -128(%rbp)        ## 8-byte Spill
	movss	%xmm0, -136(%rbp)       ## 4-byte Spill
	jne	LBB0_5
## BB#6:                                ## %._crit_edge.loopexit.unr-lcssa
	movss	-136(%rbp), %xmm0       ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -116(%rbp)       ## 4-byte Spill
LBB0_7:                                 ## %._crit_edge.loopexit
	movss	-116(%rbp), %xmm0       ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	movss	%xmm0, -52(%rbp)        ## 4-byte Spill
LBB0_8:                                 ## %._crit_edge
	movss	-52(%rbp), %xmm0        ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	movl	-48(%rbp), %eax         ## 4-byte Reload
	movl	-40(%rbp), %ecx         ## 4-byte Reload
	addl	%ecx, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rsi         ## 8-byte Reload
	movss	%xmm0, (%rsi,%rdx,4)
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc


.subsections_via_symbols
