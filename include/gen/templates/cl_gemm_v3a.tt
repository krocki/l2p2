// k_gen_ORDER_BLKSIZE_cl_gemm
__kernel void k_gen_$ORDER$_$BLKSZ$_cl_gemm_v3a_(__global $T$* restrict Z, const __global $T$* restrict X, const __global $T$* restrict Y) {

		// const int gid = get_global_id(0);
		// const int lid = get_local_id(0);
		// const int wid = get_global_id(1);

		$T$ x[16]; $T$ y[16]; $T$ z[16];

		x[0]   = X[0];  x[4] = X[4];   x[8] = X[8];     x[12] = X[12];
		x[1]   = X[1];  x[5] = X[5];   x[9] = X[9];     x[13] = X[13];
		x[2]   = X[2];  x[6] = X[6];   x[10] = X[10];   x[14] = X[14];
		x[3]   = X[3];  x[7] = X[7];   x[11] = X[11];   x[15] = X[15];

		y[0]   = Y[0];  y[4] = Y[4];   y[8] = Y[8];     y[12] = Y[12];
		y[1]   = Y[1];  y[5] = Y[5];   y[9] = Y[9];     y[13] = Y[13];
		y[2]   = Y[2];  y[6] = Y[6];   y[10] = Y[10];   y[14] = Y[14];
		y[3]   = Y[3];  y[7] = Y[7];   y[11] = Y[11];   y[15] = Y[15];

		z[0]   = 0.0f;  z[4] = 0.0f;   z[8] = 0.0f;   z[12] = 0.0f;
		z[1]   = 0.0f;  z[5] = 0.0f;   z[9] = 0.0f;   z[13] = 0.0f;
		z[2]   = 0.0f;  z[6] = 0.0f;   z[10] = 0.0f;  z[14] = 0.0f;
		z[3]   = 0.0f;  z[7] = 0.0f;   z[11] = 0.0f;  z[15] = 0.0f;

		z[0]  += x[0] * y[0];  z[0]  += x[4] * y[1];  z[0]  += x[8]  * y[2];  z[0]  += x[12] * y[3];
		z[1]  += x[1] * y[0];  z[1]  += x[5] * y[1];  z[1]  += x[9]  * y[2];  z[1]  += x[13] * y[3];
		z[2]  += x[2] * y[0];  z[2]  += x[6] * y[1];  z[2]  += x[10] * y[2];  z[2]  += x[14] * y[3];
		z[3]  += x[3] * y[0];  z[3]  += x[7] * y[1];  z[3]  += x[11] * y[2];  z[3]  += x[15] * y[3];

		z[4]  += x[0] * y[4];  z[4]  += x[4] * y[5];  z[4]  += x[8]  * y[6];  z[4]  += x[12] * y[7];
		z[5]  += x[1] * y[4];  z[5]  += x[5] * y[5];  z[5]  += x[9]  * y[6];  z[5]  += x[13] * y[7];
		z[6]  += x[2] * y[4];  z[6]  += x[6] * y[5];  z[6]  += x[10] * y[6];  z[6]  += x[14] * y[7];
		z[7]  += x[3] * y[4];  z[7]  += x[7] * y[5];  z[7]  += x[11] * y[6];  z[7]  += x[15] * y[7];

		z[8]  += x[0] * y[8];  z[8]  += x[4] * y[9];  z[8]  += x[8]  * y[10]; z[8]  += x[12] * y[11];
		z[9]  += x[1] * y[8];  z[9]  += x[5] * y[9];  z[9]  += x[9]  * y[10]; z[9]  += x[13] * y[11];
		z[10] += x[2] * y[8];  z[10] += x[6] * y[9];  z[10] += x[10] * y[10]; z[10] += x[14] * y[11];
		z[11] += x[3] * y[8];  z[11] += x[7] * y[9];  z[11] += x[11] * y[10]; z[11] += x[15] * y[11];

		z[12] += x[0] * y[12]; z[12] += x[4] * y[13]; z[12] += x[8]  * y[14]; z[12] += x[12] * y[15];
		z[13] += x[1] * y[12]; z[13] += x[5] * y[13]; z[13] += x[9]  * y[14]; z[13] += x[13] * y[15];
		z[14] += x[2] * y[12]; z[14] += x[6] * y[13]; z[14] += x[10] * y[14]; z[14] += x[14] * y[15];
		z[15] += x[3] * y[12]; z[15] += x[7] * y[13]; z[15] += x[11] * y[14]; z[15] += x[15] * y[15];

		Z[0]   = z[0];  Z[4] = z[4];   Z[8] =   z[8];   Z[12] = z[12];
		Z[1]   = z[1];  Z[5] = z[5];   Z[9] =   z[9];   Z[13] = z[13];
		Z[2]   = z[2];  Z[6] = z[6];   Z[10] = z[10];   Z[14] = z[14];
		Z[3]   = z[3];  Z[7] = z[7];   Z[11] = z[11];   Z[15] = z[15];


}

// X  	|a e i m|
//  	|b f j n|
//  	|c g k o|
//  	|d h l p|


// Y  	|A E I M|
//  	|B F J N|
//  	|C G K O|
//  	|D H L P|


// Z  | [aA+eB+iC+mD] [aE+eF+iG+mH] [aI+eJ+iK+mL] [aM+eN+iO+mP]|
//    | [bA+fB+jC+nD] [bE+fF+jG+nH] [bI+fJ+jK+nL] [bM+fN+jO+nP]|
//    | [cA+Y+kC+oD] [cE+gF+kG+oH] [cI+gJ+kK+oL] [cM+gN+kO+oP]|
//    | [dA+hB+lC+pD] [dE+hF+lG+pH] [dI+hJ+lK+pL] [dM+hN+lO+pP]|

