#define ACCUMULATE(x, y) (x) + (y)
//#define ACCUMULATE(x, y) fmax((x), ((y)))
//#define ACCUMULATE(x, y) fmin((x), ((y)))

typedef union { unsigned int ival; float fval; } _if_union_t_;

#if $USE_ATOMICS$ // USE_ATOMIC_OPS

	// global fold using atomics
	#define GLOBAL_FOLD_FUNC(acc, operand) \
		_if_union_t_ new_acc; _if_union_t_ prev_acc; \
		do { \
			prev_acc.fval = *(acc); \
			new_acc.fval = ACCUMULATE(prev_acc.fval, (operand)); \
		} while (atomic_cmpxchg((volatile __global unsigned int *)acc, prev_acc.ival, new_acc.ival) != prev_acc.ival);

#else // USE_ATOMICS == 0

	// no atomics implementation

#endif

#if $USE_LOCAL$ // USE_LOCAL_MEM

	#define REDUCE_LOCAL(N) lx[lid] = (lid < (N)) ? ACCUMULATE(lx[lid], lx[lid +  (N)]) : lx[lid]; barrier(CLK_LOCAL_MEM_FENCE);

#else // USE_LOCAL == 0

	// no lmem implementation

#endif

__kernel  void k_gen_n_$N$_lx_$LX$_ly_$LY$_wx_$WX$_wy_$WY$_cl_fold_(
__global float* restrict Y,  
__global const float* restrict X) {

	const int lid = get_local_id(0);
	const int gid = get_global_id(0);

	float loop_acc = X[gid];

	#if $ITERS$ > 1

		float arg;
		int offset = $GX$;
		#pragma unroll $ITERS$
		for (int ii = 1; ii < $ITERS$; ii++) {
			arg = X[gid+offset];
			loop_acc = ACCUMULATE(loop_acc, arg);
			offset += $GX$;
		}		

	#endif

	#if $USE_LOCAL$ // USE_LOCAL_MEM

		// local reduction using local mem

		__local float lx[$LX$];

		// load to local
		lx[lid] = loop_acc;
		barrier(CLK_LOCAL_MEM_FENCE);
	
	#endif

	// local reduction
	// assuming no more than 1024 local threads

	#if $LX$ > 512
		REDUCE_LOCAL(512);
	#endif

	#if $LX$ > 256
		REDUCE_LOCAL(256);
	#endif

	#if $LX$ > 128
		REDUCE_LOCAL(128);
	#endif

	#if $LX$ > 64
		REDUCE_LOCAL(64);
	#endif

	#if $LX$ > 32
		REDUCE_LOCAL(32);
	#endif

	#if $LX$ > 16
		REDUCE_LOCAL(16);
	#endif

	#if $LX$ > 8
		REDUCE_LOCAL(8);
	#endif

	#if $LX$ > 4
		REDUCE_LOCAL(4);
	#endif

	#if $LX$ > 2
		REDUCE_LOCAL(2);
	#endif

	#if $LX$ > 1
		REDUCE_LOCAL(1);
	#endif

	// global reduction

	if (lid == 0) {
		float local_acc = lx[lid];
		GLOBAL_FOLD_FUNC(&Y[0], local_acc);
	}

	// the final result should be in Y[0]
}
