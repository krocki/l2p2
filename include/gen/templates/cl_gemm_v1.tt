// blocked matmul
// based on https://github.com/HandsOnOpenCL/Exercises-Solutions/blob/master/Solutions/Exercise08/C_block_form.cl

// k_gen_ORDER_BLKSIZE_cl_gemm
__kernel void k_gen_$ORDER$_$BLKSZ$_cl_gemm_v1_(__global float* restrict C, const __global float* restrict A, const __global float* restrict B) {

	__local float Awrk[$BLKSZ$ * $BLKSZ$];
	__local float Bwrk[$BLKSZ$ * $BLKSZ$];

	const int i = get_global_id(0);
	const int j = get_global_id(1);

	// Element C(i,j) is in block C(Iblk,Jblk)
	const int Iblk = get_group_id(0);
	const int Jblk = get_group_id(1);

	// C(i,j) is element C(iloc, jloc) of block C(Iblk, Jblk)
	const int iloc = get_local_id(0);
	const int jloc = get_local_id(1);

	// Setup the upper-left-corner (base address) for the A and
	// B blocks plus the increments to advance base addresses as
	// we loop over blocks
	int Abase = Jblk * $BLKSZ$;
	int Bbase = Iblk * $ORDER$ * $BLKSZ$;

	float Ctmp = 0.0f;

	// C(Iblk,Jblk) = (sum over Kblk) A(Iblk,Kblk)*B(Kblk,Jblk)
	//#pragma unroll $NUM_BLK$
	for (int Kblk = 0;  Kblk < $NUM_BLK$;  Kblk++) {

		// Load A(Iblk,Kblk) and B(Kblk,Jblk) into local memory.
		// Each work-item loads a single element of the two blocks
		// which are shared with the entire work-group.

		Awrk[iloc * $BLKSZ$ + jloc] = A[Abase + iloc * $ORDER$ + jloc];
		Bwrk[iloc * $BLKSZ$ + jloc] = B[Bbase + iloc * $ORDER$ + jloc];

		barrier(CLK_LOCAL_MEM_FENCE);

		// Compute dot products over local blocks to find
		// the contribution to C(i,j) from this block
#pragma unroll $BLKSZ$
		for (int kloc = 0; kloc < $BLKSZ$; kloc++)
			Ctmp += Awrk[kloc * $BLKSZ$ + jloc] * Bwrk[iloc * $BLKSZ$ + kloc];

		barrier(CLK_LOCAL_MEM_FENCE);
		Abase += $A_INC$;
		Bbase += $B_INC$;
	}

	// update global C matrix
	C[i * $ORDER$ + j] = Ctmp;

}
