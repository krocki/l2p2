#define ACCUMULATE(x, y) (x) + (y)

__kernel  void k_gen_n_$N$_lx_$LX$_ly_$LY$_wx_$WX$_wy_$WY$_cl_scan_(
__global float* restrict Y,  
__global const float* restrict X) {

	const int lid = get_local_id(0);
	const int gid = get_global_id(0);

	// load to local mem
	__local float lx[$LX$];
	lx[lid] = 1.0f * gid;//X[gid];
	barrier(CLK_LOCAL_MEM_FENCE);

	printf("#0 lid %d lx[lid] = %f\n", lid, lx[lid]);

	// ver #1
	//for (int offset = 1; offset < $LX$; offset *= 2) {

		float t;

		//printf("#1 lid %d, offset %d, lx[lid] = %f\n", lid, offset, lx[lid]);
		if (lid >= offset) { t = lx[lid]; }
		barrier(CLK_LOCAL_MEM_FENCE);

		//printf("#2 lid %d, offset %d, lx[lid] = %f\n", lid, offset, lx[lid]);
		if (lid >= offset) { lx[lid] = ACCUMULATE(t, lx[lid]); }
		barrier(CLK_LOCAL_MEM_FENCE);	

		//printf("#3 lid %d, offset %d, lx[lid] = %f\n", lid, offset, lx[lid]);
	//}

	printf("#4 lid %d lx[lid] = %f\n", lid, lx[lid]);

	// write to global mem
	//Y[gid] = lx[lid];
}
