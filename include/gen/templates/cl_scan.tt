#define ACCUMULATE(x, y) (x) + (y)

#define SCAN_LOCAL(offset) if (lid >= (offset)) { lx[lid] = ACCUMULATE(lx[lid], lx[lid-offset]);} barrier(CLK_LOCAL_MEM_FENCE);

__kernel  void k_gen_n_$N$_lx_$LX$_ly_$LY$_wx_$WX$_wy_$WY$_cl_scan_(
__global float* restrict Y,  
__global const float* restrict X) {

	const int lid = get_local_id(0);
	const int gid = get_global_id(0);
	const int wid = get_group_id(0);

	// load to local mem
	__local float lx[$LX$];
	__local float lx2[$LX$];
        lx[lid] = X[gid];
	barrier(CLK_LOCAL_MEM_FENCE);

	// ver #1 - simple
	// for (int offset = 1; offset < $LX$; offset *= 2) {

	// 	if (lid >= offset) { lx[lid] = ACCUMULATE(lx[lid-offset], lx[lid]); }
	// 	barrier(CLK_LOCAL_MEM_FENCE);
	// }

	int offset;

	// local up-reduce
	//
	// 1 1 1 1 1 1 1 1
	// 1 2 1 2 1 2 1 2
	// 1 2 1 4 1 2 1 4
	// 1 2 1 4 1 2 1 8
	//

	for (offset = 1; offset < $LX$; offset <<= 1) {
		//printf("lid %d, off %d\n", lid, offset);
		if ((lid+1) % (offset*2) == 0) {
			lx[lid] = lx[lid-offset] + lx[lid];
		}
		barrier(CLK_LOCAL_MEM_FENCE);
	}


        // local down-phase
        //
        // 1 2 1 4 1 2 1 8
        //        \  |
        //         \ |        // STRIDE = 4
        //          \|
        // 1 2 1 4 1 6 1 8
        //   \ | \ | \ |
        //    \|  \|  \|      // STRIDE = 2
        // 1 2 3 4 5 6 7 8
        //

        for (offset = $LX$/2; offset > 1; offset >>= 1) {
                if ((lid+1) % offset == 0) {
                        lx[lid+offset/2] = lx[lid+offset/2] + lx[lid];
                }
                barrier(CLK_LOCAL_MEM_FENCE);
        }

        // last thread in a group
        if ((lid + 1) % $LX$ == 0) {
             Y[wid] = lx[lid];
        }

        barrier(CLK_GLOBAL_MEM_FENCE);
	
	// 2nd pass
	if (lid < $WX$) {
		lx2[lid] = Y[lid];
		for (offset = 1; offset < $WX$; offset <<= 1) {
			if ((lid+1) % (offset*2) == 0) {
				lx2[lid] = lx2[lid-offset] + lx2[lid];
			}
			barrier(CLK_LOCAL_MEM_FENCE);
		}
		for (offset = $WX$/2; offset > 1; offset >>= 1) {
			if ((lid+1) % offset == 0) {
				lx2[lid+offset/2] = lx2[lid+offset/2] + lx2[lid];
			}
			barrier(CLK_LOCAL_MEM_FENCE);
		}
	}

        //int inclusive = 0;
        //if (inclusive) { /*nothing*/ } else { lx[lid] = lid > 0 ? lx[lid-1] : 0.0f;}

        if (wid > 0)
		lx[lid] += lx2[wid-1];

	// write to global mem
	Y[gid] = lx[lid];
}
